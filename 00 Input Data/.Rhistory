TRUE ~  as.numeric(sim_out[,"SBP",t+1])+random_beta_Na_SBP_main[5,s]*((as.numeric(sim_out[,"sodium",t+1]) - as.numeric(sim_out[,"sodium",1]))/2.3)
)
# Additional SBP effect of sodium intake in Blacks
sim_out[,"SBP",t+1] <- ifelse(as.numeric(sim_out[,"Race",t+1]) == 2, as.numeric(sim_out[,"SBP",t+1])+random_beta_Na_SBP_black[1,s]*((as.numeric(sim_out[,"sodium",t+1]) - as.numeric(sim_out[,"sodium",1]))/2.3),  as.numeric(sim_out[,"SBP",t+1]))
sim_out[,"SBP",t+1] <- ifelse((as.numeric(sim_out[,"SBP",t]) >= 140 | as.numeric(sim_out[,"DBP",t]) >= 90), as.numeric(sim_out[,"SBP",t+1])+random_beta_Na_SBP_hpt[1,s]*((as.numeric(sim_out[,"sodium",t+1]) - as.numeric(sim_out[,"sodium",1]))/2.3), as.numeric(sim_out[,"SBP",t+1]))
sim_out[,"DBP",t+1] <- update_risk_factor(sim_out[,,t], "DBP", "SBP", s)
sim_out[,"Trig",t+1] <- update_risk_factor(sim_out[,,t], "Trig", "Trig", s)
sim_out[,"Glucose",t+1] <- update_risk_factor(sim_out[,,t], "Glucose", "Glucose", s)
# SSB-IHD/CHD
RR_diff_ssb_ihd <- case_when(
sim_out[,"Age_cycle",t] < 45 ~ exp(random_logrr_SSB_IHD[1,s]*(as.numeric(sim_out[,"ssb",t+1]) - as.numeric(sim_out[,"ssb",1]))),
sim_out[,"Age_cycle",t] < 55 ~ exp(random_logrr_SSB_IHD[2,s]*(as.numeric(sim_out[,"ssb",t+1]) - as.numeric(sim_out[,"ssb",1]))),
sim_out[,"Age_cycle",t] < 65 ~ exp(random_logrr_SSB_IHD[3,s]*(as.numeric(sim_out[,"ssb",t+1]) - as.numeric(sim_out[,"ssb",1]))),
sim_out[,"Age_cycle",t] < 75 ~ exp(random_logrr_SSB_IHD[4,s]*(as.numeric(sim_out[,"ssb",t+1]) - as.numeric(sim_out[,"ssb",1]))),
TRUE ~ exp(random_logrr_SSB_IHD[5,s]*(as.numeric(sim_out[,"ssb",t+1]) - as.numeric(sim_out[,"ssb",1])))
)
# SSB-T2DM
RR_diff_ssb_t2d <- case_when(
sim_out[,"Age_cycle",t] < 45 ~ exp(random_logrr_SSB_T2D[1,s]*(as.numeric(sim_out[,"ssb",t+1]) - as.numeric(sim_out[,"ssb",1]))),
sim_out[,"Age_cycle",t] < 55 ~ exp(random_logrr_SSB_T2D[2,s]*(as.numeric(sim_out[,"ssb",t+1]) - as.numeric(sim_out[,"ssb",1]))),
sim_out[,"Age_cycle",t] < 65 ~ exp(random_logrr_SSB_T2D[3,s]*(as.numeric(sim_out[,"ssb",t+1]) - as.numeric(sim_out[,"ssb",1]))),
sim_out[,"Age_cycle",t] < 75 ~ exp(random_logrr_SSB_T2D[4,s]*(as.numeric(sim_out[,"ssb",t+1]) - as.numeric(sim_out[,"ssb",1]))),
TRUE ~ exp(random_logrr_SSB_T2D[5,s]*(as.numeric(sim_out[,"ssb",t+1]) - as.numeric(sim_out[,"ssb",1])))
)
# BMI-IHD/CHD
RR_diff_bmi_ihd <- case_when(
sim_out[,"Age_cycle",t] < 45 ~ exp(random_logrr_BMI_IHD[1,s]*(as.numeric(sim_out[,"BMI",t+1]) - as.numeric(sim_out[,"BMI",1]))/5),
sim_out[,"Age_cycle",t] < 55 ~ exp(random_logrr_BMI_IHD[2,s]*(as.numeric(sim_out[,"BMI",t+1]) - as.numeric(sim_out[,"BMI",1]))/5),
sim_out[,"Age_cycle",t] < 65 ~ exp(random_logrr_BMI_IHD[3,s]*(as.numeric(sim_out[,"BMI",t+1]) - as.numeric(sim_out[,"BMI",1]))/5),
sim_out[,"Age_cycle",t] < 75 ~ exp(random_logrr_BMI_IHD[4,s]*(as.numeric(sim_out[,"BMI",t+1]) - as.numeric(sim_out[,"BMI",1]))/5),
TRUE ~ exp(random_logrr_BMI_IHD[5,s]*(as.numeric(sim_out[,"BMI",t+1]) - as.numeric(sim_out[,"BMI",1]))/5)
)
# BMI-Total stroke
RR_diff_bmi_tstk <- case_when(
sim_out[,"Age_cycle",t] < 45 ~ exp(random_logrr_BMI_TSTK[1,s]*(as.numeric(sim_out[,"BMI",t+1]) - as.numeric(sim_out[,"BMI",1]))/5),
sim_out[,"Age_cycle",t] < 55 ~ exp(random_logrr_BMI_TSTK[2,s]*(as.numeric(sim_out[,"BMI",t+1]) - as.numeric(sim_out[,"BMI",1]))/5),
sim_out[,"Age_cycle",t] < 65 ~ exp(random_logrr_BMI_TSTK[3,s]*(as.numeric(sim_out[,"BMI",t+1]) - as.numeric(sim_out[,"BMI",1]))/5),
sim_out[,"Age_cycle",t] < 75 ~ exp(random_logrr_BMI_TSTK[4,s]*(as.numeric(sim_out[,"BMI",t+1]) - as.numeric(sim_out[,"BMI",1]))/5),
TRUE ~ exp(random_logrr_BMI_TSTK[5,s]*(as.numeric(sim_out[,"BMI",t+1]) - as.numeric(sim_out[,"BMI",1]))/5)
)
# Sat.Fat-IHD/CHD
RR_diff_sfat_ihd <- case_when(
sim_out[,"Age_cycle",t] < 45 ~ exp(random_logrr_SFAT_IHD[1,s]*(as.numeric(sim_out[,"sfat",t+1]) - as.numeric(sim_out[,"sfat",1]))/5),
sim_out[,"Age_cycle",t] < 55 ~ exp(random_logrr_SFAT_IHD[2,s]*(as.numeric(sim_out[,"sfat",t+1]) - as.numeric(sim_out[,"sfat",1]))/5),
sim_out[,"Age_cycle",t] < 65 ~ exp(random_logrr_SFAT_IHD[3,s]*(as.numeric(sim_out[,"sfat",t+1]) - as.numeric(sim_out[,"sfat",1]))/5),
sim_out[,"Age_cycle",t] < 75 ~ exp(random_logrr_SFAT_IHD[4,s]*(as.numeric(sim_out[,"sfat",t+1]) - as.numeric(sim_out[,"sfat",1]))/5),
TRUE ~ exp(random_logrr_SFAT_IHD[5,s]*(as.numeric(sim_out[,"sfat",t+1]) - as.numeric(sim_out[,"sfat",1]))/5)
)
# Sugar-IHD/CHD
RR_diff_sugar_ihd <- case_when(
sim_out[,"Age_cycle",t] < 45 ~ exp(random_logrr_Sugar_IHD[1,s]*(as.numeric(sim_out[,"added_sugar",t+1]) - as.numeric(sim_out[,"added_sugar",1]))),
sim_out[,"Age_cycle",t] < 55 ~ exp(random_logrr_Sugar_IHD[2,s]*(as.numeric(sim_out[,"added_sugar",t+1]) - as.numeric(sim_out[,"added_sugar",1]))),
sim_out[,"Age_cycle",t] < 65 ~ exp(random_logrr_Sugar_IHD[3,s]*(as.numeric(sim_out[,"added_sugar",t+1]) - as.numeric(sim_out[,"added_sugar",1]))),
sim_out[,"Age_cycle",t] < 75 ~ exp(random_logrr_Sugar_IHD[4,s]*(as.numeric(sim_out[,"added_sugar",t+1]) - as.numeric(sim_out[,"added_sugar",1]))),
TRUE ~ exp(random_logrr_Sugar_IHD[5,s]*(as.numeric(sim_out[,"added_sugar",t+1]) - as.numeric(sim_out[,"added_sugar",1])))
)
# Sugar-T2DM
RR_diff_sugar_t2d <- case_when(
sim_out[,"Age_cycle",t] < 45 ~ exp(random_logrr_Sugar_T2D[1,s]*(as.numeric(sim_out[,"added_sugar",t+1]) - as.numeric(sim_out[,"added_sugar",1]))),
sim_out[,"Age_cycle",t] < 55 ~ exp(random_logrr_Sugar_T2D[2,s]*(as.numeric(sim_out[,"added_sugar",t+1]) - as.numeric(sim_out[,"added_sugar",1]))),
sim_out[,"Age_cycle",t] < 65 ~ exp(random_logrr_Sugar_T2D[3,s]*(as.numeric(sim_out[,"added_sugar",t+1]) - as.numeric(sim_out[,"added_sugar",1]))),
sim_out[,"Age_cycle",t] < 75 ~ exp(random_logrr_Sugar_T2D[4,s]*(as.numeric(sim_out[,"added_sugar",t+1]) - as.numeric(sim_out[,"added_sugar",1]))),
TRUE ~ exp(random_logrr_Sugar_T2D[5,s]*(as.numeric(sim_out[,"added_sugar",t+1]) - as.numeric(sim_out[,"added_sugar",1])))
)
# Combine direct and indirect effects by multiplying RRs
RR_diff_total_CHD <- RR_diff_bmi_ihd*RR_diff_ssb_ihd*RR_diff_sfat_ihd*RR_diff_sugar_ihd
RR_diff_total_DM <- RR_diff_ssb_t2d*RR_diff_sugar_t2d
RR_diff_total_Stroke <- RR_diff_bmi_tstk
#Updating the disease risk
raw.input.data  <- cbind(as.numeric(sim_out[,"seqn",t]), as.numeric(sim_out[,"Age_cycle",t]), as.numeric(sim_out[,"Female",t]), as.numeric(sim_out[,"Race",t]),
as.numeric(sim_out[,"Glucose",t]), as.numeric(sim_out[,"BMI",t]), as.numeric(sim_out[,"Total_Chol",t]), as.numeric(sim_out[,"HBP",t]),
as.numeric(sim_out[,"HDL",t]), as.numeric(sim_out[,"Trig",t]), as.numeric(sim_out[,"SBP",t]),as.numeric(sim_out[,"DBP",t]),
as.numeric(sim_out[,"HPT_Txt",t]), as.numeric(sim_out[,"Smoking",t]), as.numeric(sim_out[,"Diabetes",t]),  as.numeric(sim_out[,"CVD_history",t]), as.numeric(sim_out[,"DM_parent",t]))
colnames(raw.input.data) <- c("seqn","Age","Female","Race","Glucose","BMI","Total_Chol","HBP","HDL","Trig","SBP","DBP","HPT_Txt","Smoking","Diabetes","CVD_history", "DM_parent" )
raw.input.data <- as.data.frame(raw.input.data)
if (t%/%2 > 0 & t%%2 == 0)  {
CVD_Recurrent_risk_2yr <- calc_recur_CVD_risk(raw.input.data)
sim_out[,"CVD_recurrent_prob",t+1] <- Multi_yr_Risk_to_annual_prob(time=2, risk=CVD_Recurrent_risk_2yr)
} else {
sim_out[,"CVD_recurrent_prob",t+1] <- sim_out[,"CVD_recurrent_prob",t]
}
if (t%/%8 > 0 & t%%8 == 0)  {
DM_risk_8yr <- calc_DM_risk(raw.input.data)
sim_out[,"DM_prob",t+1] <- Multi_yr_Risk_to_annual_prob(time=8, risk=DM_risk_8yr)
} else {
sim_out[,"DM_prob",t+1] <- sim_out[,"DM_prob",t]
}
if (t%/%10 > 0 & t%%10 == 0) {
ASCVD_Risk_10yr <- calc_ASCVD_risk(raw.input.data)
sim_out[,"CVD_prob",t+1] <- Multi_yr_Risk_to_annual_prob(time=10, risk=ASCVD_Risk_10yr)
} else {
sim_out[,"CVD_prob",t+1] <- sim_out[,"CVD_prob",t]
}
#Defining transition probabilities
# Subtract 19 from age because indexing starts at age 20
p.death.DM <- case_when(
sim_out[,"DEMO",t] == "Male" ~ DM_mortality_Male[as.numeric(sim_out[,"Age_cycle",t])-19,s],
sim_out[,"DEMO",t] == "Female" ~ DM_mortality_Female[as.numeric(sim_out[,"Age_cycle",t])-19,s],
sim_out[,"DEMO",t] == "NHWM" ~ DM_mortality_NHWM[as.numeric(sim_out[,"Age_cycle",t])-19,s],
sim_out[,"DEMO",t] == "NHWF" ~ DM_mortality_NHWF[as.numeric(sim_out[,"Age_cycle",t])-19,s],
sim_out[,"DEMO",t] == "NHBM" ~ DM_mortality_NHBM[as.numeric(sim_out[,"Age_cycle",t])-19,s],
sim_out[,"DEMO",t] == "NHBF" ~ DM_mortality_NHBF[as.numeric(sim_out[,"Age_cycle",t])-19,s],
sim_out[,"DEMO",t] == "HM" ~ DM_mortality_HM[as.numeric(sim_out[,"Age_cycle",t])-19,s],
sim_out[,"DEMO",t] == "HF" ~ DM_mortality_HM[as.numeric(sim_out[,"Age_cycle",t])-19,s]
)
p.death.CHD <- case_when(
sim_out[,"DEMO",t] == "Male" ~ CHD_mortality_Male[as.numeric(sim_out[,"Age_cycle",t])-19,s],
sim_out[,"DEMO",t] == "Female" ~ CHD_mortality_Female[as.numeric(sim_out[,"Age_cycle",t])-19,s],
sim_out[,"DEMO",t] == "NHWM" ~ CHD_mortality_NHWM[as.numeric(sim_out[,"Age_cycle",t])-19,s],
sim_out[,"DEMO",t] == "NHWF" ~ CHD_mortality_NHWF[as.numeric(sim_out[,"Age_cycle",t])-19,s],
sim_out[,"DEMO",t] == "NHBM" ~ CHD_mortality_NHBM[as.numeric(sim_out[,"Age_cycle",t])-19,s],
sim_out[,"DEMO",t] == "NHBF" ~ CHD_mortality_NHBF[as.numeric(sim_out[,"Age_cycle",t])-19,s],
sim_out[,"DEMO",t] == "HM" ~ CHD_mortality_HM[as.numeric(sim_out[,"Age_cycle",t])-19,s],
sim_out[,"DEMO",t] == "HF" ~ CHD_mortality_HM[as.numeric(sim_out[,"Age_cycle",t])-19,s]
)
p.death.Stroke <- case_when(
sim_out[,"DEMO",t] == "Male" ~ stroke_mortality_Male[as.numeric(sim_out[,"Age_cycle",t])-19,s],
sim_out[,"DEMO",t] == "Female" ~ stroke_mortality_Female[as.numeric(sim_out[,"Age_cycle",t])-19,s],
sim_out[,"DEMO",t] == "NHWM" ~ stroke_mortality_NHWM[as.numeric(sim_out[,"Age_cycle",t])-19,s],
sim_out[,"DEMO",t] == "NHWF" ~ stroke_mortality_NHWF[as.numeric(sim_out[,"Age_cycle",t])-19,s],
sim_out[,"DEMO",t] == "NHBM" ~ stroke_mortality_NHBM[as.numeric(sim_out[,"Age_cycle",t])-19,s],
sim_out[,"DEMO",t] == "NHBF" ~ stroke_mortality_NHBF[as.numeric(sim_out[,"Age_cycle",t])-19,s],
sim_out[,"DEMO",t] == "HM" ~ stroke_mortality_HM[as.numeric(sim_out[,"Age_cycle",t])-19,s],
sim_out[,"DEMO",t] == "HF" ~ stroke_mortality_HM[as.numeric(sim_out[,"Age_cycle",t])-19,s]
)
p.death <- case_when(
sim_out[,"DEMO",t] == "Male" ~ Non_CVD_DM_mortality_Male[as.numeric(sim_out[,"Age_cycle",t])-19,s],
sim_out[,"DEMO",t] == "Female" ~ Non_CVD_DM_mortality_Female[as.numeric(sim_out[,"Age_cycle",t])-19,s],
sim_out[,"DEMO",t] == "NHWM" ~ Non_CVD_DM_mortality_NHWM[as.numeric(sim_out[,"Age_cycle",t])-19,s],
sim_out[,"DEMO",t] == "NHWF" ~ Non_CVD_DM_mortality_NHWF[as.numeric(sim_out[,"Age_cycle",t])-19,s],
sim_out[,"DEMO",t] == "NHBM" ~ Non_CVD_DM_mortality_NHBM[as.numeric(sim_out[,"Age_cycle",t])-19,s],
sim_out[,"DEMO",t] == "NHBF" ~ Non_CVD_DM_mortality_NHBF[as.numeric(sim_out[,"Age_cycle",t])-19,s],
sim_out[,"DEMO",t] == "HM" ~ Non_CVD_DM_mortality_HM[as.numeric(sim_out[,"Age_cycle",t])-19,s],
sim_out[,"DEMO",t] == "HF" ~ Non_CVD_DM_mortality_HM[as.numeric(sim_out[,"Age_cycle",t])-19,s]
)
#Disaggregating ASCVD
p.CHD_first <- as.numeric(Prop_CHD[1,sim_out[,"DEMO",t]]) #Prob. of CHD event (Angina, MI, Fatal MI, Fatal CHD) Source: Benjamin et al, Circulation, 2018 Table 13-1 & 18-1, and 18-2
p.CHD_recurrent <- as.numeric(Prop_CHD[2,sim_out[,"DEMO",t]])
#Markov State #1: "No CVD, No Diabetes"
p.H.2.DM <- RR_diff_total_DM*as.numeric(sim_out[,"DM_prob",t])*as.numeric(sim_out[,"risk_adjustment.DM",t])
p.H.2.initial_CHD <- RR_diff_total_CHD*p.CHD_first*as.numeric(sim_out[,"CVD_prob",t])
p.H.2.initial_Stroke <- RR_diff_total_Stroke*(1-p.CHD_first)*as.numeric(sim_out[,"CVD_prob",t])
p.H.2.H <- ifelse((p.H.2.DM + p.H.2.initial_CHD + p.H.2.initial_Stroke + p.death) > 1, 0,
1 - (p.H.2.DM + p.H.2.initial_CHD + p.H.2.initial_Stroke + p.death))
#Markov State #2: "No CVD, With Diabetes
p.DM.2.death <- (1-exp(-(p.death+p.death.DM)))
p.DM.2.initial_CHD <- RR_diff_total_CHD*p.CHD_first*as.numeric(sim_out[,"CVD_prob",t])
p.DM.2.initial_Stroke <- RR_diff_total_Stroke*(1-p.CHD_first)*as.numeric(sim_out[,"CVD_prob",t])
p.DM.2.DM <- ifelse((p.DM.2.initial_CHD + p.DM.2.initial_Stroke + p.DM.2.death) > 1, 0,
1 - (p.DM.2.initial_CHD + p.DM.2.initial_Stroke + p.DM.2.death))
#Markov State #3: "First Stroke"
p.initial_Stroke.2.death <- ifelse(as.numeric(sim_out[,"Diabetes",t]) ==1, (1-exp(-(p.death+p.death.Stroke+p.death.DM))), (1-exp(-(p.death+p.death.Stroke))))
p.initial_Stroke.2.CVD_No_DM <- ifelse(as.numeric(sim_out[,"Diabetes",t]) ==1, 0, 1 - p.initial_Stroke.2.death)
p.initial_Stroke.2.CVD_DM <- ifelse(as.numeric(sim_out[,"Diabetes",t]) ==1, 1 - p.initial_Stroke.2.death, 0)
#Markov State #4: "First CHD w/o RVSC"
p.initial_CHD_No_RVSC.2.death <- ifelse(as.numeric(sim_out[,"Diabetes",t]) ==1, (1-exp(-(p.death+p.death.CHD+p.death.DM))), (1-exp(-(p.death+p.death.CHD))))
p.initial_CHD_No_RVSC.2.CVD_No_DM <- ifelse(as.numeric(sim_out[,"Diabetes",t]) ==1, 0, 1 - p.initial_CHD_No_RVSC.2.death)
p.initial_CHD_No_RVSC.2.CVD_DM <- ifelse(as.numeric(sim_out[,"Diabetes",t]) ==1, 1 - p.initial_CHD_No_RVSC.2.death, 0)
#Markov State #5: "First CHD with RVSC"
p.initial_CHD_RVSC.2.death <- ifelse(as.numeric(sim_out[,"Diabetes",t]) ==1, (1-exp(-(p.death+p.death.CHD+p.death.DM+p.death.RVSC_sim[s]))), (1-exp(-(p.death+p.death.CHD+p.death.RVSC_sim[s]))))
p.initial_CHD_RVSC.2.CVD_No_DM <- ifelse(as.numeric(sim_out[,"Diabetes",t]) ==1, 0, 1 - p.initial_CHD_RVSC.2.death)
p.initial_CHD_RVSC.2.CVD_DM <- ifelse(as.numeric(sim_out[,"Diabetes",t]) ==1, 1 - p.initial_CHD_RVSC.2.death, 0)
#Markov State #6: "CVD History, No Diabetes"
p.CVD.2.DM <- RR_diff_total_DM*as.numeric(sim_out[,"DM_prob",t])*as.numeric(sim_out[,"DM_prob",t])
p.CVD.2.Sub_CHD <- RR_diff_total_CHD*p.CHD_recurrent*as.numeric(sim_out[,"CVD_recurrent_prob",t])
p.CVD.2.Sub_Stroke <- RR_diff_total_Stroke*(1-p.CHD_recurrent)*as.numeric(sim_out[,"CVD_recurrent_prob",t])
p.CVD.2.death <- (1-exp(-(p.death+p.death.CHD+p.death.Stroke)))
p.CVD.2.CVD <- ifelse((p.CVD.2.DM + p.CVD.2.Sub_CHD + p.CVD.2.Sub_Stroke + p.CVD.2.death) > 1, 0,
1 - (p.CVD.2.DM + p.CVD.2.Sub_CHD + p.CVD.2.Sub_Stroke + p.CVD.2.death))
#Markov State #7: "CVD History, With Diabetes"
p.CVD_DM.2.Sub_CHD <- RR_diff_total_CHD*p.CHD_recurrent*as.numeric(sim_out[,"CVD_recurrent_prob",t])
p.CVD_DM.2.Sub_Stroke <- RR_diff_total_Stroke*(1-p.CHD_recurrent)*as.numeric(sim_out[,"CVD_recurrent_prob",t])
p.CVD_DM.2.death <- (1-exp(-(as.numeric(sim_out[,"DM_prob",t])+p.death.CHD+p.death.Stroke+p.death.DM)))
p.CVD_DM.2.CVD_DM <- ifelse((p.CVD_DM.2.death + p.CVD_DM.2.Sub_CHD + p.CVD_DM.2.Sub_Stroke) > 1, 0,
1 - (p.CVD_DM.2.death + p.CVD_DM.2.Sub_CHD + p.CVD_DM.2.Sub_Stroke))
#Markov State #8: "Subsequent Stroke"
p.sub_Stroke.2.death <- ifelse(as.numeric(sim_out[,"Diabetes",t]) ==1, (1-exp(-(p.death+p.death.Stroke+p.death.DM))), (1-exp(-(p.death+p.death.Stroke))))
p.sub_Stroke.2.CVD_No_DM <- ifelse(as.numeric(sim_out[,"Diabetes",t]) ==1, 0, 1 - p.sub_Stroke.2.death)
p.sub_Stroke.2.CVD_DM <- ifelse(as.numeric(sim_out[,"Diabetes",t]) ==1, 1 - p.sub_Stroke.2.death, 0)
#Markov State #9: "Subsequent CHD w/o RVSC"
p.sub_CHD_No_RVSC.2.death <- ifelse(as.numeric(sim_out[,"Diabetes",t]) ==1, (1-exp(-(p.death+p.death.CHD+p.death.DM))), (1-exp(-(p.death+p.death.CHD))))
p.sub_CHD_No_RVSC.2.CVD_No_DM <- ifelse(as.numeric(sim_out[,"Diabetes",t]) ==1, 0, 1 - p.sub_CHD_No_RVSC.2.death)
p.sub_CHD_No_RVSC.2.CVD_DM <- ifelse(as.numeric(sim_out[,"Diabetes",t]) ==1, 1 - p.sub_CHD_No_RVSC.2.death, 0)
#Markov State #10: "Subsequent CHD with RVSC"
p.sub_CHD_RVSC.2.death <- ifelse(as.numeric(sim_out[,"Diabetes",t]) ==1, (1-exp(-(p.death+p.death.CHD+p.death.DM+p.death.RVSC_sim[s]))), (1-exp(-(p.death+p.death.CHD+p.death.RVSC_sim[s]))))
p.sub_CHD_RVSC.2.CVD_No_DM <- ifelse(as.numeric(sim_out[,"Diabetes",t]) ==1, 0, 1 - p.sub_CHD_RVSC.2.death)
p.sub_CHD_RVSC.2.CVD_DM <- ifelse(as.numeric(sim_out[,"Diabetes",t]) ==1, 1 - p.sub_CHD_RVSC.2.death, 0)
#Assign transition probablities
p.transition <- array(NA, dim=c(n.individual, n.health.state),
dimnames = list(data_for_analysis$Subject_ID,name.health.state))
p.transition[,"No CVD, No Diabetes"] <- ifelse(sim_out[,"state",t] == "No CVD, No Diabetes", p.H.2.H, rep(0, n.individual))
p.transition[,"No CVD, With Diabetes"] <- ifelse(sim_out[,"state",t] == "No CVD, No Diabetes", p.H.2.DM,
ifelse(sim_out[,"state",t] == "No CVD, With Diabetes", p.DM.2.DM, rep(0, n.individual)))
p.transition[,"First Stroke"] <- ifelse(sim_out[,"state",t] == "No CVD, No Diabetes", p.H.2.initial_Stroke,
ifelse(sim_out[,"state",t] == "No CVD, With Diabetes", p.DM.2.initial_Stroke, rep(0, n.individual)))
p.transition[,"First CHD w/o RVSC"] <- ifelse(sim_out[,"state",t] == "No CVD, No Diabetes", (1-p.RVSC)*p.H.2.initial_CHD,
ifelse(sim_out[,"state",t] == "No CVD, With Diabetes", (1-p.RVSC)*p.DM.2.initial_CHD, rep(0, n.individual)))
p.transition[,"First CHD with RVSC"] <- ifelse(sim_out[,"state",t] == "No CVD, No Diabetes", p.RVSC*p.H.2.initial_CHD,
ifelse(sim_out[,"state",t] == "No CVD, With Diabetes", p.RVSC*p.DM.2.initial_CHD, rep(0, n.individual)))
p.transition[,"CVD History, No Diabetes"] <- case_when(
sim_out[,"state",t] == "First Stroke" ~ p.initial_Stroke.2.CVD_No_DM,
sim_out[,"state",t] == "First CHD w/o RVSC" ~ p.initial_CHD_No_RVSC.2.CVD_No_DM,
sim_out[,"state",t] == "First CHD with RVSC" ~ p.initial_CHD_RVSC.2.CVD_No_DM,
sim_out[,"state",t] == "CVD History, No Diabetes" ~ p.CVD.2.CVD,
sim_out[,"state",t] == "Subsequent Stroke" ~ p.sub_Stroke.2.CVD_No_DM,
sim_out[,"state",t] == "Subsequent CHD w/o RVSC" ~ p.sub_CHD_No_RVSC.2.CVD_No_DM,
sim_out[,"state",t] == "Subsequent CHD with RVSC" ~ p.sub_CHD_RVSC.2.CVD_No_DM,
TRUE ~ rep(0, n.individual)
)
p.transition[,"CVD History, With Diabetes"] <- case_when(
sim_out[,"state",t] == "First Stroke" ~ p.initial_Stroke.2.CVD_DM,
sim_out[,"state",t] == "First CHD w/o RVSC" ~ p.initial_CHD_No_RVSC.2.CVD_No_DM,
sim_out[,"state",t] == "First CHD with RVSC" ~ p.initial_CHD_RVSC.2.CVD_DM,
sim_out[,"state",t] == "CVD History, No Diabetes" ~ p.CVD.2.DM,
sim_out[,"state",t] == "CVD History, With Diabetes" ~ p.CVD_DM.2.CVD_DM,
sim_out[,"state",t] == "Subsequent Stroke" ~ p.sub_Stroke.2.CVD_DM,
sim_out[,"state",t] == "Subsequent CHD w/o RVSC" ~ p.sub_CHD_No_RVSC.2.CVD_DM,
sim_out[,"state",t] == "Subsequent CHD with RVSC" ~ p.sub_CHD_RVSC.2.CVD_DM,
TRUE ~ rep(0, n.individual)
)
p.transition[,"Subsequent Stroke"] <- ifelse(sim_out[,"state",t] == "CVD History, No Diabetes", p.CVD.2.Sub_Stroke,
ifelse(sim_out[,"state",t] == "CVD History, With Diabetes", p.CVD_DM.2.Sub_Stroke, rep(0, n.individual)))
p.transition[,"Subsequent CHD w/o RVSC"] <- ifelse(sim_out[,"state",t] == "CVD History, No Diabetes", (1-p.RVSC)*p.CVD.2.Sub_CHD,
ifelse(sim_out[,"state",t] == "CVD History, No Diabetes", (1-p.RVSC)*p.CVD_DM.2.Sub_CHD, rep(0, n.individual)))
p.transition[,"Subsequent CHD with RVSC"] <- ifelse(sim_out[,"state",t] == "CVD History, No Diabetes", p.RVSC*p.CVD.2.Sub_CHD,
ifelse(sim_out[,"state",t] == "CVD History, No Diabetes", p.RVSC*p.CVD_DM.2.Sub_CHD, rep(0, n.individual)))
p.transition[,"Death"] <- case_when(
sim_out[,"state",t] == "No CVD, No Diabetes" ~ p.death,
sim_out[,"state",t] == "No CVD, With Diabetes" ~ p.DM.2.death,
sim_out[,"state",t] == "First Stroke" ~ p.initial_Stroke.2.death,
sim_out[,"state",t] == "First CHD w/o RVSC" ~ p.initial_CHD_No_RVSC.2.death,
sim_out[,"state",t] == "First CHD with RVSC" ~ p.initial_CHD_RVSC.2.death,
sim_out[,"state",t] == "CVD History, No Diabetes" ~ p.CVD.2.death,
sim_out[,"state",t] == "CVD History, With Diabetes" ~ p.CVD_DM.2.death,
sim_out[,"state",t] == "Subsequent Stroke" ~ p.sub_Stroke.2.death,
sim_out[,"state",t] == "Subsequent CHD w/o RVSC" ~ p.sub_CHD_No_RVSC.2.death,
sim_out[,"state",t] == "Subsequent CHD with RVSC" ~ p.sub_CHD_RVSC.2.death,
TRUE ~ rep(1, n.individual)
)
#Updating Disease history status
sim_out[,"Diabetes",t] <- ifelse(sim_out[,"state",t] %in% c("No CVD, With Diabetes", "CVD History, With Diabetes"), 1,
ifelse(sim_out[,"state",t] == "Death", NA,
ifelse(as.numeric(sim_out[,"Glucose",t]) > 126, 1, sim_out[,"Diabetes",t])))
sim_out[,"CVD_history",t] <- ifelse(sim_out[,"state",t] %in% c("First Stroke", "First CHD w/o RVSC", "First CHD with RVSC", "CVD History, No Diabetes", "CVD History, With Diabetes",
"Subsequent Stroke", "Subsequent CHD w/o RVSC", "Subsequent CHD with RVSC"), 1,
ifelse(sim_out[,"state",t] == "Death", NA, sim_out[,"CVD_history",t]))
sim_out[,"BMI",t+1] <- ifelse(sim_out[,"state",t] == "Death", NA, sim_out[,"BMI",t+1])
sim_out[,"Obesity",t+1] <- ifelse(as.numeric(sim_out[,"BMI",t+1]) < 30, 0,
ifelse((as.numeric(sim_out[,"BMI",t+1]) >= 30), 1, NA))
#Estimating HrQOL and HCE
sim_out[,"HRQOL_scores",t] <- calc_HRQOL(raw.input.data, HRQOL_parameter_sim[,s])
sim_out[,"HRQOL_scores",t] <- ifelse(sim_out[,"state",t] %in% c("First Stroke", "Subsequent Stroke"), as.numeric(sim_out[,"HRQOL_scores",t])+u_stroke_sim[s],
ifelse(sim_out[,"state",t] %in% c("First CHD w/o RVSC", "First CHD with RVSC", "Subsequent CHD w/o RVSC", "Subsequent CHD with RVSC"), as.numeric(sim_out[,"HRQOL_scores",t])+u_CHD_sim[s],
ifelse(sim_out[,"state",t] == "Death", 0, sim_out[,"HRQOL_scores",t])))
sim_out[,"HCE_predict",t] <- calc_HCE(raw.input.data, HCE_parameter_sim[,s])
sim_out[,"HCE_predict",t] <- ifelse(sim_out[,"state",t] %in% c("First Stroke", "Subsequent Stroke"), as.numeric(sim_out[,"HCE_predict",t])+c_stroke_sim[s],
ifelse(sim_out[,"state",t] %in% c("First CHD w/o RVSC", "Subsequent CHD w/o RVSC"), as.numeric(sim_out[,"HCE_predict",t])+c_CHD_sim[s],
ifelse(sim_out[,"state",t] %in% c("First CHD with RVSC", "Subsequent CHD with RVSC"), as.numeric(sim_out[,"HCE_predict",t])+c_CHD_sim[s]+c_RVSC_sim[s],
ifelse(sim_out[,"state",t] == "Death", NA, sim_out[,"HCE_predict",t]))))
# Discount effects and costs
sim_out[,"effect_disc",t] <- as.numeric(sim_out[,"HRQOL_scores",t])/((1+beta_QALY)^(t-1))
sim_out[,"cost_disc",t] <- as.numeric(sim_out[,"HCE_predict",t])/((1+beta_cost)^(t-1))
# Transition to the next health state
sim_out[,"state",t+1] <- apply(p.transition, 1, function(x) sample(name.health.state, 1, prob = x))
}
dim(sim_out)
sim_out[,as.numeric(sim_out[,"Age_cycle",])>=40,]
as.numeric(sim_out[,"Age_cycle",])>=40
sim_out[as.numeric(sim_out[,"Age_cycle",])>=40,,]
length(as.numeric(sim_out[,"Age_cycle",])>=40)
sim_out[as.numeric(sim_out[,"Age_cycle",])>=40]
test = sim_out[as.numeric(sim_out[,"Age_cycle",])>=40]
dim(test)
dim(sim_out)
View(NHANES)
sum(NHANES$Age<40)
names(NHANES)
library(dplyr)
library(purrr)
library(foreign)
library(Hmisc) # multiple imputation
library(survey)
setwd('~/Documents/Friedman/Food-PRICE/TDCM/00 Input Data')
raw_filepath = "MasterNHANES_raw_1718.csv"
preImp_filepath = "NHANES_1718_preImp.csv"
imputed_filepath = "NHANES_1718_Imp10.csv"
cycles <- c("2017-2018")
cycle_letters <- c("J")
# Excludes drug (RXQ_RX) and dietary data because handled separately (multiple rows per person)
files <- c("DEMO", "TCHOL", "TRIGLY", "HDL", "BMX", "BPQ", "BPX", "SMQ", "DIQ", "GHB", "GLU", "OGTT", "MCQ", "CDQ")
nhanes_vars <- c("SEQN", "SDDSRVYR", "WTINT2YR", "WTMEC2YR", "SDMVPSU", "SDMVSTRA", "RIDAGEYR", "RIAGENDR", "RIDRETH1", "RIDRETH3", "DMDEDUC2", "INDFMPIR",
"LBXTC", "LBXTR", "LBDHDD", "BPXSY1", "BPXSY2", "BPXSY3", "BPXSY4", "BPXDI1", "BPXDI2", "BPXDI3", "BPXDI4",
"BPQ020", "BPQ050A", "SMQ020", "SMQ040", "MCQ300C", "BMXBMI", "DIQ010", "LBXGH", "LBXGLU", "LBXGLT",
"MCQ160B", "MCQ160C", "MCQ160E", "MCQ160F", "CDQ001", "CDQ002", "CDQ003",
"CDQ004", "CDQ005", "CDQ006", "CDQ009D", "CDQ009E", "CDQ009F", "CDQ009G")
read_data <- function(cycle_i, file_base) {
cycle = cycles[cycle_i]
cycle_letter = cycle_letters[cycle_i]
file = paste(file_base, "_", cycle_letter, ".XPT", sep = "")
data = read.xport(paste('./nhanes_raw', cycle, file, sep = '/'))
return(data)
}
# Merge all files, append all cycles
nhanes_raw = data.frame()
for (cycle_i in 1:length(cycles)) {
cycle = cycles[cycle_i]
data_cycle = lapply(files, read_data, cycle_i = cycle_i)
# Merge each file for a single cycle (left merge)
cycle_df = reduce(data_cycle, merge, by = "SEQN", all.x = T)
# Select variables
cycle_df = select(cycle_df, any_of(nhanes_vars))
# Append for final data table of all relevant data
nhanes_raw = rbind(nhanes_raw, cycle_df)
}
read_data <- function(cycle_i, file_base) {
print(file_base)
cycle = cycles[cycle_i]
cycle_letter = cycle_letters[cycle_i]
file = paste(file_base, "_", cycle_letter, ".XPT", sep = "")
data = read.xport(paste('./nhanes_raw', cycle, file, sep = '/'))
return(data)
}
# Merge all files, append all cycles
nhanes_raw = data.frame()
for (cycle_i in 1:length(cycles)) {
cycle = cycles[cycle_i]
data_cycle = lapply(files, read_data, cycle_i = cycle_i)
# Merge each file for a single cycle (left merge)
cycle_df = reduce(data_cycle, merge, by = "SEQN", all.x = T)
# Select variables
cycle_df = select(cycle_df, any_of(nhanes_vars))
# Append for final data table of all relevant data
nhanes_raw = rbind(nhanes_raw, cycle_df)
}
# Merge all files, append all cycles
nhanes_raw = data.frame()
for (cycle_i in 1:length(cycles)) {
cycle = cycles[cycle_i]
data_cycle = lapply(files, read_data, cycle_i = cycle_i)
# Merge each file for a single cycle (left merge)
cycle_df = reduce(data_cycle, merge, by = "SEQN", all.x = T)
# Select variables
cycle_df = select(cycle_df, any_of(nhanes_vars))
# Append for final data table of all relevant data
nhanes_raw = rbind(nhanes_raw, cycle_df)
}
# Excludes drug (RXQ_RX) and dietary data because handled separately (multiple rows per person)
files <- c("DEMO", "TCHOL", "TRIGLY", "HDL", "BMX", "BPQ", "BPX", "SMQ", "DIQ", "GHB", "GLU", "MCQ", "CDQ")
nhanes_vars <- c("SEQN", "SDDSRVYR", "WTINT2YR", "WTMEC2YR", "SDMVPSU", "SDMVSTRA", "RIDAGEYR", "RIAGENDR", "RIDRETH1", "RIDRETH3", "DMDEDUC2", "INDFMPIR",
"LBXTC", "LBXTR", "LBDHDD", "BPXSY1", "BPXSY2", "BPXSY3", "BPXSY4", "BPXDI1", "BPXDI2", "BPXDI3", "BPXDI4",
"BPQ020", "BPQ050A", "SMQ020", "SMQ040", "MCQ300C", "BMXBMI", "DIQ010", "LBXGH", "LBXGLU",
"MCQ160B", "MCQ160C", "MCQ160E", "MCQ160F", "CDQ001", "CDQ002", "CDQ003",
"CDQ004", "CDQ005", "CDQ006", "CDQ009D", "CDQ009E", "CDQ009F", "CDQ009G")
read_data <- function(cycle_i, file_base) {
print(file_base)
cycle = cycles[cycle_i]
cycle_letter = cycle_letters[cycle_i]
file = paste(file_base, "_", cycle_letter, ".XPT", sep = "")
data = read.xport(paste('./nhanes_raw', cycle, file, sep = '/'))
return(data)
}
# Merge all files, append all cycles
nhanes_raw = data.frame()
for (cycle_i in 1:length(cycles)) {
cycle = cycles[cycle_i]
data_cycle = lapply(files, read_data, cycle_i = cycle_i)
# Merge each file for a single cycle (left merge)
cycle_df = reduce(data_cycle, merge, by = "SEQN", all.x = T)
# Select variables
cycle_df = select(cycle_df, any_of(nhanes_vars))
# Append for final data table of all relevant data
nhanes_raw = rbind(nhanes_raw, cycle_df)
}
write.csv(nhanes_raw, raw_filepath, row.names = F)
# Read drug information file (can be used for all NHANES cycles)
rx_info = read.xport('./nhanes_raw/RXQ_DRUG.XPT')
# Read drug information file (can be used for all NHANES cycles)
rx_info = read.xport('./nhanes_raw/RXQ_DRUG.XPT')
rx_info = rx_info %>%
select(RXDDRGID, RXDDRUG, RXDDCI1A, RXDDCI1B, RXDDCI1C) %>%
arrange(RXDDRGID)
# Append individual medication files from all cycles
rx_df = data.frame()
for (cycle_i in 1:length(cycles)) {
cycle = cycles[cycle_i]
cycle_rx = read_data(cycle_i, "RXQ_RX")
cycle_rx = select(cycle_rx, SEQN, RXDUSE, RXDDRGID)
rx_df = bind_rows(rx_df, cycle_rx)
}
# Sort by RXDDRGID
rx_df = arrange(rx_df, RXDDRGID, SEQN)
# Merge with rx_info
rx_df_w_info = merge(rx_df, rx_info, all.x = T)
rx_df_w_info = arrange(rx_df_w_info, SEQN)
names(nhanes_raw)
tolower(names(nhanes_raw))
names(nhanes_raw)
# Prepare data for imputation
names(nhanes_raw) = tolower(names(nhanes_raw))
###################################################################################################
### PREPARING FOR IMPUTATION: RENAMING, RECODING, AND CREATING VARIABLES  ###
###################################################################################################
nhanes_raw = read.csv(raw_filepath)
names(nhanes_raw)[1:6]
# Prepare data for imputation
names(nhanes_raw)[1:6] = tolower(names(nhanes_raw)[1:6])
names(nhanes_raw)
nhanes <- nhanes_raw %>%
# Rename variables
rename(
Age = RIDAGEYR,
edu = DMDEDUC2,  # Education level
pir = INDFMPIR,  # Income to poverty ratio
Total_Chol = LBXTC,   # Total cholesterol
Trig = LBXTR,    # Triglycerides
HDL = LBDHDD,    # HDL cholesterol
BMI = BMXBMI,    # Body mass index
dm_self = DIQ010, # Self-reported diabetes
HbA1c = LBXGH,   # Hemoglobin A1c
Glucose = LBXGLU,    # Fasting plasma glucose
chd = MCQ160C,   # Coronary heart disease
mi = MCQ160E,    # Heart attack
Stroke = MCQ160F, # Stroke
DM_family = MCQ300C # Biological relative with diabetes
) %>%
mutate(
# Recode "Refused" or "Don't Know" to missing
edu = ifelse(edu == 7 | edu == 9, NA, edu),
dm_self = ifelse(dm_self == 7 | dm_self == 9, NA, ifelse(dm_self == 3, 2, dm_self)), # assume borderline is negative
chd = ifelse(chd == 7 | chd == 9, NA, chd),
mi = ifelse(mi == 7 | mi == 9, NA, mi),
Stroke = ifelse(Stroke == 7 | Stroke == 9, NA, Stroke),
CDQ001 = ifelse(CDQ001 == 7 | CDQ001 == 9, NA, CDQ001),
CDQ002 = ifelse(CDQ002 == 7 | CDQ002 == 9, NA, CDQ002),
CDQ003 = ifelse(CDQ003 == 7 | CDQ003 == 9, NA, CDQ003),
CDQ004 = ifelse(CDQ004 == 7 | CDQ004 == 9, NA, CDQ004),
CDQ005 = ifelse(CDQ005 == 7 | CDQ005 == 9, NA, CDQ005),
CDQ006 = ifelse(CDQ006 == 7 | CDQ006 == 9, NA, CDQ006),
BPQ050A = ifelse(BPQ050A == 7 | BPQ050A == 9, NA, BPQ050A),
DM_family = ifelse(DM_family == 7 | DM_family == 9, NA, DM_family),
SMQ020 = ifelse(SMQ020 == 7 | SMQ020 == 9, NA, SMQ020),
SMQ040 = ifelse(SMQ040 == 7 | SMQ040 == 9, NA, SMQ040),
# Define additional variables
Female = case_when(RIAGENDR == 1 ~ 0, RIAGENDR == 2 ~ 1),
Race = case_when(RIDRETH1 == 1 | RIDRETH1 == 2 ~ 3, # Hispanic
RIDRETH1 == 3 ~ 1,                 # White
RIDRETH1 == 4 ~ 2,                 # Black
RIDRETH1 == 5 ~ 4),                # Other
SBP = rowMeans(select(nhanes_raw, starts_with("BPXSY")), na.rm = T),
DBP = rowMeans(select(nhanes_raw, starts_with("BPXDI")), na.rm = T),
HPT_Txt = case_when(BPQ020 == 2 | BPQ050A == 2 ~ 0,
BPQ020 == 1 & BPQ050A == 1 ~ 1),
Smoking = case_when(SMQ020 == 2 | (SMQ020 == 1 & SMQ040 == 3) ~ 0,
SMQ020 == 1 & (SMQ040 == 1 | SMQ040 == 2) ~ 1),
# NOTE: Rose Questionnaire was only asked to participants 40 years and older
# Participants less than 40 years assumed to be negative
roseQ = ifelse(Age < 40, 0, ifelse(CDQ001==1 & CDQ002==1 & CDQ004==1 & CDQ005==1 & CDQ006==1 &
((CDQ009D==4 | CDQ009E==5) | (CDQ009F==6 | CDQ009G==7)), 1, 0))
)
library(dplyr)
nhanes <- nhanes_raw %>%
# Rename variables
rename(
Age = RIDAGEYR,
edu = DMDEDUC2,  # Education level
pir = INDFMPIR,  # Income to poverty ratio
Total_Chol = LBXTC,   # Total cholesterol
Trig = LBXTR,    # Triglycerides
HDL = LBDHDD,    # HDL cholesterol
BMI = BMXBMI,    # Body mass index
dm_self = DIQ010, # Self-reported diabetes
HbA1c = LBXGH,   # Hemoglobin A1c
Glucose = LBXGLU,    # Fasting plasma glucose
chd = MCQ160C,   # Coronary heart disease
mi = MCQ160E,    # Heart attack
Stroke = MCQ160F, # Stroke
DM_family = MCQ300C # Biological relative with diabetes
) %>%
mutate(
# Recode "Refused" or "Don't Know" to missing
edu = ifelse(edu == 7 | edu == 9, NA, edu),
dm_self = ifelse(dm_self == 7 | dm_self == 9, NA, ifelse(dm_self == 3, 2, dm_self)), # assume borderline is negative
chd = ifelse(chd == 7 | chd == 9, NA, chd),
mi = ifelse(mi == 7 | mi == 9, NA, mi),
Stroke = ifelse(Stroke == 7 | Stroke == 9, NA, Stroke),
CDQ001 = ifelse(CDQ001 == 7 | CDQ001 == 9, NA, CDQ001),
CDQ002 = ifelse(CDQ002 == 7 | CDQ002 == 9, NA, CDQ002),
CDQ003 = ifelse(CDQ003 == 7 | CDQ003 == 9, NA, CDQ003),
CDQ004 = ifelse(CDQ004 == 7 | CDQ004 == 9, NA, CDQ004),
CDQ005 = ifelse(CDQ005 == 7 | CDQ005 == 9, NA, CDQ005),
CDQ006 = ifelse(CDQ006 == 7 | CDQ006 == 9, NA, CDQ006),
BPQ050A = ifelse(BPQ050A == 7 | BPQ050A == 9, NA, BPQ050A),
DM_family = ifelse(DM_family == 7 | DM_family == 9, NA, DM_family),
SMQ020 = ifelse(SMQ020 == 7 | SMQ020 == 9, NA, SMQ020),
SMQ040 = ifelse(SMQ040 == 7 | SMQ040 == 9, NA, SMQ040),
# Define additional variables
Female = case_when(RIAGENDR == 1 ~ 0, RIAGENDR == 2 ~ 1),
Race = case_when(RIDRETH1 == 1 | RIDRETH1 == 2 ~ 3, # Hispanic
RIDRETH1 == 3 ~ 1,                 # White
RIDRETH1 == 4 ~ 2,                 # Black
RIDRETH1 == 5 ~ 4),                # Other
SBP = rowMeans(select(nhanes_raw, starts_with("BPXSY")), na.rm = T),
DBP = rowMeans(select(nhanes_raw, starts_with("BPXDI")), na.rm = T),
HPT_Txt = case_when(BPQ020 == 2 | BPQ050A == 2 ~ 0,
BPQ020 == 1 & BPQ050A == 1 ~ 1),
Smoking = case_when(SMQ020 == 2 | (SMQ020 == 1 & SMQ040 == 3) ~ 0,
SMQ020 == 1 & (SMQ040 == 1 | SMQ040 == 2) ~ 1),
# NOTE: Rose Questionnaire was only asked to participants 40 years and older
# Participants less than 40 years assumed to be negative
roseQ = ifelse(Age < 40, 0, ifelse(CDQ001==1 & CDQ002==1 & CDQ004==1 & CDQ005==1 & CDQ006==1 &
((CDQ009D==4 | CDQ009E==5) | (CDQ009F==6 | CDQ009G==7)), 1, 0))
)
